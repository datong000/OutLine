var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameUI_1 = require("./script/GameUI");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/GameUI.ts", GameUI_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "test/TestScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/GameUI":4}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        Laya.stage.alignV = GameConfig_1.default.alignV;
        Laya.stage.alignH = GameConfig_1.default.alignH;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        // if ( GameConfig.stat ) Laya.Stat.show();
        Laya.alertGlobalError = false;
        // Laya.Stat.show();
        Laya.Shader3D.debugMode = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //查看描边Shader
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
        //打开查看自发光Shader
        // new Shader_GlowingEdge();
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 自定义描边材质球
 */
var CtmMat_Outline = /** @class */ (function (_super) {
    __extends(CtmMat_Outline, _super);
    function CtmMat_Outline() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CtmMat_Outline.prototype.init = function () {
        this.setShaderName("CtmSha_Outline");
        this.renderMode = Laya.BlinnPhongMaterial.RENDERMODE_OPAQUE;
    };
    Object.defineProperty(CtmMat_Outline.prototype, "Color", {
        set: function (value) {
            this._shaderValues.setVector(CtmMat_Outline.Color, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CtmMat_Outline.prototype, "LineWidth", {
        set: function (value) {
            this._shaderValues.setNumber(CtmMat_Outline.LineWidth, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CtmMat_Outline.prototype, "Texture", {
        set: function (value) {
            this._shaderValues.setTexture(CtmMat_Outline.Texture, value);
        },
        enumerable: true,
        configurable: true
    });
    CtmMat_Outline.Color = Laya.Shader3D.propertyNameToID("u_Color");
    CtmMat_Outline.LineWidth = Laya.Shader3D.propertyNameToID("u_LineWidth");
    CtmMat_Outline.Texture = Laya.Shader3D.propertyNameToID("u_Texture");
    return CtmMat_Outline;
}(Laya.BlinnPhongMaterial));
exports.CtmMat_Outline = CtmMat_Outline;
var CtmSha_Outline = /** @class */ (function () {
    function CtmSha_Outline() {
    }
    CtmSha_Outline.prototype.initShader = function () {
        var attributeMap = {
            "a_Position": Laya.VertexMesh.MESH_POSITION0,
            "a_Normal": Laya.VertexMesh.MESH_NORMAL0,
            'a_Texcoord0': Laya.VertexMesh.MESH_TEXTURECOORDINATE0,
            'a_BoneWeights': Laya.VertexMesh.MESH_BLENDWEIGHT0,
            'a_BoneIndices': Laya.VertexMesh.MESH_BLENDINDICES0
        };
        var uniformMap = {
            'u_Bones': Laya.Shader3D.PERIOD_CUSTOM,
            'u_MvpMatrix': Laya.Shader3D.PERIOD_SPRITE,
            'u_WorldMat': Laya.Shader3D.PERIOD_SPRITE,
            'u_Color': Laya.Shader3D.PERIOD_MATERIAL,
            'u_LineWidth': Laya.Shader3D.PERIOD_MATERIAL,
            'u_Texture': Laya.Shader3D.PERIOD_MATERIAL,
        };
        var vs1 = "\n        #include \"Lighting.glsl\";\n        attribute vec4 a_Position;\n        attribute vec2 a_Texcoord0;\n        attribute vec3 a_Normal;\n        uniform mat4 u_MvpMatrix;\n        uniform mat4 u_WorldMat;\n        varying vec2 v_Texcoord0;\n        varying vec3 v_Normal;\n\n        #ifdef BONE\n        attribute vec4 a_BoneIndices;\n        attribute vec4 a_BoneWeights;\n        const int c_MaxBoneCount = 24;\n        uniform mat4 u_Bones[c_MaxBoneCount];\n        #endif\n\n        void main()\n        {\n            //\u8BA1\u7B97\u9876\u70B9\u4F4D\u7F6E\n            v_Texcoord0 = a_Texcoord0;\n            #ifdef BONE\n            mat4 skinTransform=mat4(0.0);\n            skinTransform += u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n            skinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n            skinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n            skinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n            vec4 position = skinTransform * a_Position;\n            gl_Position=u_MvpMatrix * position;\n            mat3 worldMat=mat3(u_WorldMat * skinTransform);\n            #else\n            gl_Position=u_MvpMatrix * a_Position;\n            mat3 worldMat=mat3(u_WorldMat);\n            #endif\n            v_Normal=worldMat*a_Normal;\n            gl_Position=remapGLPositionZ(gl_Position); \n        }\n        ";
        var ps1 = "\n        #ifdef FSHIGHPRECISION\n        precision highp float;\n        #else\n        precision mediump float;\n        #endif\n        uniform vec4 u_Color;\n        uniform sampler2D u_Texture;\n        varying vec2 v_Texcoord0;\n\n        void main()\n        {\n            //\u7EB9\u7406\u53D6\u6837\n            // gl_FragColor = vec4(0.0,0.0,0.0,1.0); \n            gl_FragColor = texture2D(u_Texture,v_Texcoord0);\n        }\n        ";
        var customShader = Laya.Shader3D.add("CtmSha_Outline");
        var subShader = new Laya.SubShader(attributeMap, uniformMap, Laya.SkinnedMeshSprite3D.shaderDefines, Laya.BlinnPhongMaterial.shaderDefines);
        customShader.addSubShader(subShader);
        subShader.addShaderPass(vs1, ps1);
        var vs2 = "\n        #include \"Lighting.glsl\";\n        attribute vec4 a_Position;\n        attribute vec3 a_Normal;\n        uniform float u_LineWidth;\n        uniform mat4 u_MvpMatrix;\n        uniform mat4 u_WorldMat;\n        varying vec3 v_Normal;\n        #ifdef BONE\n        attribute vec4 a_BoneIndices;\n        attribute vec4 a_BoneWeights;\n        const int c_MaxBoneCount = 24;\n        uniform mat4 u_Bones[c_MaxBoneCount];\n        #endif\n        void main()\n        {\n            #ifdef BONE\n            mat4 skinTransform=mat4(0.0);\n            skinTransform += u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n            skinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n            skinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n            skinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n            vec4 newPosition = skinTransform * a_Position;\n            mat3 worldMat=mat3(u_WorldMat * skinTransform);\n            #else\n            gl_Position=u_MvpMatrix * a_Position;\n            mat3 worldMat=mat3(u_WorldMat);\n            #endif\n            v_Normal=worldMat*a_Normal;\n            \n            //\u9876\u70B9\u4F4D\u7F6E+\u6CD5\u7EBF*\u957F\u5EA6\n            vec4 position = vec4(a_Position.xyz + a_Normal * u_LineWidth, 1.0); \n            #ifdef BONE\n            gl_Position =  u_MvpMatrix * (skinTransform *  position); \n            #else\n            gl_Position =  u_MvpMatrix *  position; \n            #endif\n        }\n        ";
        var ps2 = "\n        #ifdef FSHIGHPRECISION\n        precision highp float;\n        #else\n        precision mediump float;\n        #endif\n        uniform vec4 u_Color;\n        void main()\n        {\n            //\u8BBE\u7F6E\u63CF\u8FB9\u989C\u8272\n            gl_FragColor = u_Color; \n        }\n        ";
        var pass1 = subShader.addShaderPass(vs2, ps2);
        pass1.renderState.cull = Laya.RenderState.CULL_FRONT;
    };
    return CtmSha_Outline;
}());
exports.CtmSha_Outline = CtmSha_Outline;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var CtmMat_Outline_1 = require("./CtmMat_Outline");
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
var GameUI = /** @class */ (function (_super) {
    __extends(GameUI, _super);
    function GameUI() {
        var _this = _super.call(this) || this;
        new CtmMat_Outline_1.CtmSha_Outline().initShader();
        // // //添加3D场景
        var scene = Laya.stage.addChild(new Laya.Scene3D());
        //添加照相机
        var camera = (scene.addChild(new Laya.Camera(0, 0.1, 100)));
        camera.transform.translate(new Laya.Vector3(0, 3.5, 4));
        camera.transform.rotate(new Laya.Vector3(-30, 0, 0), true, false);
        //添加方向光
        var directionLight = scene.addChild(new Laya.DirectionLight());
        directionLight.color = new Laya.Vector3(0.6, 0.6, 0.6);
        directionLight.transform.worldMatrix.setForward(new Laya.Vector3(1, -1, 0));
        var baseMaterials;
        //加载精灵
        Laya.Sprite3D.load("res/threeDimen/skinModel/dude/dude.lh", Laya.Handler.create(_this, function (dude) {
            scene.addChild(dude);
            //使用自定义材质
            var customMaterial1 = new CtmMat_Outline_1.CtmMat_Outline();
            customMaterial1.init();
            customMaterial1.Color = new Laya.Vector4(0, 0, 0, 1);
            customMaterial1.LineWidth = 0;
            Laya.Texture2D.load("res/threeDimen/skinModel/dude/Assets/dude/head.png", Laya.Handler.create(this, function (tex) {
                customMaterial1.Texture = tex;
            }));
            var customMaterial2 = new CtmMat_Outline_1.CtmMat_Outline();
            customMaterial2.init();
            customMaterial2.Color = new Laya.Vector4(0, 0, 0, 1);
            customMaterial2.LineWidth = 0;
            Laya.Texture2D.load("res/threeDimen/skinModel/dude/Assets/dude/jacket.png", Laya.Handler.create(this, function (tex) {
                customMaterial2.Texture = tex;
            }));
            var customMaterial3 = new CtmMat_Outline_1.CtmMat_Outline();
            customMaterial3.init();
            customMaterial3.Color = new Laya.Vector4(0, 0, 0, 1);
            customMaterial3.LineWidth = 0;
            Laya.Texture2D.load("res/threeDimen/skinModel/dude/Assets/dude/pants.png", Laya.Handler.create(this, function (tex) {
                customMaterial3.Texture = tex;
            }));
            var customMaterial4 = new CtmMat_Outline_1.CtmMat_Outline();
            customMaterial4.init();
            customMaterial4.Color = new Laya.Vector4(0, 0, 0, 1);
            customMaterial4.LineWidth = 0;
            Laya.Texture2D.load("res/threeDimen/skinModel/dude/Assets/dude/upBodyC.png", Laya.Handler.create(this, function (tex) {
                customMaterial4.Texture = tex;
            }));
            baseMaterials = new Array();
            baseMaterials[0] = customMaterial1;
            baseMaterials[1] = customMaterial2;
            baseMaterials[2] = customMaterial3;
            baseMaterials[3] = customMaterial4;
            this._baseMaterials = baseMaterials;
            dude.getChildAt(0).getChildAt(0).skinnedMeshRenderer.sharedMaterials = baseMaterials;
            dude.transform.position = new Laya.Vector3(0, 0, 0);
            dude.transform.scale = new Laya.Vector3(0.6, 0.6, 0.6);
            dude.transform.rotate(new Laya.Vector3(5, 180, 0), false, false);
            Laya.timer.frameLoop(1, this, function () {
                dude.transform.rotate(new Laya.Vector3(0, 1, 0), false, false);
            });
        }));
        //添加自定义模型
        // var box: Laya.MeshSprite3D = scene.addChild( new Laya.MeshSprite3D( Laya.PrimitiveMesh.createBox( 1, 1, 1 ) ) ) as Laya.MeshSprite3D;
        // box.transform.rotate( new Laya.Vector3( 0, 45, 0 ), false, false );
        var material = new CtmMat_Outline_1.CtmMat_Outline();
        // material.init();
        // material.Color = new Laya.Vector4( 0, 0, 0, 1 );
        // material.LineWidth = 0;
        // Laya.Texture2D.load( "res/layabox.png", Laya.Handler.create( null, function ( tex: Laya.Texture2D )
        // {
        //     material.Texture = tex;
        // } ) );
        // this._material = material;
        // box.meshRenderer.material = material;
        // let out: Laya.Quaternion = new Laya.Quaternion();
        // let yaw, pitch, roll;
        // yaw = pitch = roll = 0;
        // Laya.timer.frameLoop( 1, this, () =>
        // {
        //     yaw += 0.005;
        //     roll += 0.005;
        //     Laya.Quaternion.createFromYawPitchRoll( yaw, pitch, roll, out );
        //     box.transform.rotation = out;
        // } )
        _this.slider.showLabel = false;
        _this.slider.changeHandler = Laya.Handler.create(_this, function () {
            if (baseMaterials != null) {
                for (var i = 0; i < baseMaterials.length; i++) {
                    baseMaterials[i].LineWidth = _this.slider.value / 100;
                }
            }
            else {
                material.LineWidth = _this.slider.value / 100;
            }
        }, null, false);
        _this.colorPicker.changeHandler = new Laya.Handler(_this, _this.onChangeColor, [_this.colorPicker]);
        _this.bt.on(Laya.Event.CLICK, _this, function () {
            if (baseMaterials != null) {
                _this.slider.value = 100;
                for (var i = 0; i < baseMaterials.length; i++) {
                    baseMaterials[i].LineWidth = 1;
                }
            }
            else {
                material.LineWidth = 0.015;
                _this.slider.value = 0.015 * 100;
            }
        });
        return _this;
    }
    GameUI.prototype.onChangeColor = function (colorPicker) {
        var arr = this.colorString2RGB(colorPicker.selectedColor).split(",");
        if (this._baseMaterials != null) {
            for (var i = 0; i < this._baseMaterials.length; i++) {
                this._baseMaterials[i].Color = new Laya.Vector4(Number(arr[0]) / 255, Number(arr[1]) / 255, Number(arr[2]) / 255, 1);
            }
        }
        else {
            this._material.Color = new Laya.Vector4(Number(arr[0]) / 255, Number(arr[1]) / 255, Number(arr[2]) / 255, 1);
        }
    };
    /**
     * #ffffff转RGB颜色值
     */
    GameUI.prototype.colorString2RGB = function (value) {
        var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
        var sColor = value.toLowerCase();
        if (sColor && reg.test(sColor)) {
            if (sColor.length === 4) {
                var sColorNew = "#";
                for (var i = 1; i < 4; i += 1) {
                    sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));
                }
                sColor = sColorNew;
            }
            //处理六位的颜色值
            var sColorChange = [];
            for (var i = 1; i < 7; i += 2) {
                sColorChange.push(parseInt("0x" + sColor.slice(i, i + 2)));
            }
            return sColorChange.join(",");
        }
        else {
            return sColor;
        }
    };
    return GameUI;
}(layaMaxUI_1.ui.test.TestSceneUI));
exports.default = GameUI;
},{"./../ui/layaMaxUI":5,"./CtmMat_Outline":3}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var test;
    (function (test) {
        var TestSceneUI = /** @class */ (function (_super) {
            __extends(TestSceneUI, _super);
            function TestSceneUI() {
                return _super.call(this) || this;
            }
            TestSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("test/TestScene");
            };
            return TestSceneUI;
        }(Scene));
        test.TestSceneUI = TestSceneUI;
        REG("ui.test.TestSceneUI", TestSceneUI);
    })(test = ui.test || (ui.test = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
